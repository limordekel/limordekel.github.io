import WebSocket from 'ws';
/**
 * Closes the websocket connection and clears the global shared reference
 */
export declare const closeWebSocket: () => Promise<void>;
/**
 * Returns a stable reference to a WebSocket connected to the zerostep server.
 */
export declare const getWebSocket: () => Promise<WebSocket>;
/**
 * Sends a message over the zerostep WebSocket
 */
export declare const sendWebSocketMessage: (message: TaskStartZeroStepMessage | CommandResponseZeroStepMessage) => Promise<void>;
/**
 * Adds an event listener for message events emitted by the WebSocket. The
 * callback receives a parsed object from the message's `data` field. Returns
 * a functions that will remove the listener.
 */
export declare const addWebSocketMessageHandler: (taskId: string, handler: (data: TaskCompleteZeroStepMessage | CommandRequestZeroStepMessage, removeListener: () => void) => void) => Promise<void>;
type SupportedModel = 'GPT_3.5';
export type StepOptions = {
    debug?: boolean;
    model?: SupportedModel;
    type?: 'action' | 'assert' | 'query';
    disableScroll?: boolean;
};
export type TaskStartZeroStepMessage = {
    type: 'task-start';
    packageVersion?: string;
    taskId?: string;
    task: string;
    snapshot: {
        dom: string;
        screenshot: string;
        pixelRatio: number;
        viewportWidth: number;
        viewportHeight: number;
    };
    options?: StepOptions;
};
export type TaskCompleteZeroStepMessage = {
    type: 'task-complete';
    taskId?: string;
    wasSuccessful: Boolean;
    result?: {
        actions?: ('click' | 'input' | 'hover' | 'keypress' | 'navigate')[];
        assertion?: boolean;
        query?: string;
    };
    model: SupportedModel;
    errorMessage?: string;
};
export type CommandRequestZeroStepMessage = {
    type: 'command-request';
    taskId?: string;
    index: number;
    name: string;
    arguments: Record<string, any>;
};
export type CommandResponseZeroStepMessage = {
    type: 'command-response';
    packageVersion?: string;
    taskId?: string;
    index: number;
    result: any;
};
export {};
