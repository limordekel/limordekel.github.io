import type { APIPage, APITestType } from './types.js';
import type { StepOptions } from './webSocket.js';
/**
 * Executes the provided plain-english task. If an array of tasks is provided
 * as the first argument, tasks will be bundled according to the options.parallelism
 * value (default=10) and executed in parallel. The promise will resolve once all
 * provided tasks have completed
 */
export declare const ai: (task: string | string[], config: {
    page: APIPage;
    test: APITestType;
}, options?: ExecutionOptions & StepOptions) => Promise<any>;
/**
 * A helper function to generate a playwright fixture for ai(). Can be used in
 * a playwright setup
 */
export declare const aiFixture: (test: APITestType) => {
    ai: ({ page }: any, use: any) => Promise<void>;
};
type ExecutionOptions = {
    parallelism?: number;
    failImmediately?: boolean;
};
export type AiFixture = {
    ai: (task: string | string[], options?: StepOptions & ExecutionOptions) => ReturnType<typeof ai>;
};
export {};
