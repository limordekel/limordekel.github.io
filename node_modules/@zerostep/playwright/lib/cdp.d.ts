import type { Page, ScrollType } from './types.js';
/**
 * Closes the cdp session and clears the global shared reference. This
 * happens automatically when a page closes in a playwright test, so
 * should generally not be necessary.
 */
export declare const detachCPDSession: (page: Page) => Promise<void>;
/**
 * Returns a stable reference to a CDP session.
 */
export declare const getCDPSession: (page: Page) => Promise<CDPSession>;
export declare const getScreenshot: (page: Page) => Promise<string>;
export declare const scrollIntoView: (page: Page, args: {
    id: string;
}) => Promise<void>;
export declare const getTitle: (page: Page) => Promise<any>;
export declare const get: (page: Page, args: {
    url: string;
}) => Promise<void>;
export declare const scrollElement: (page: Page, args: {
    id: string;
    target: ScrollType;
}) => Promise<void>;
export declare const runFunctionOn: (page: Page, args: {
    functionDeclaration: string;
    backendNodeId: number;
}) => Promise<void>;
export declare const getDOMSnapshot: (page: Page) => Promise<import("playwright-core/types/protocol.js").Protocol.DOMSnapshot.captureSnapshotReturnValue>;
export declare const getLayoutMetrics: (page: Page) => Promise<import("playwright-core/types/protocol.js").Protocol.Page.getLayoutMetricsReturnValue>;
export declare const clearElement: (page: Page, args: {
    id: string;
}) => Promise<void>;
export declare const sendKeysToElement: (page: Page, args: {
    id: string;
    value: string[];
}) => Promise<boolean>;
export declare const getElementAttribute: (page: Page, args: {
    id: string;
    name: string;
}) => Promise<string | undefined>;
export declare const getElementTagName: (page: Page, args: {
    id: string;
}) => Promise<any>;
export declare const clickElement: (page: Page, args: {
    id: string;
}) => Promise<boolean>;
export declare const getContentQuads: (page: Page, args: {
    backendNodeId: number;
}) => Promise<{
    topLeftX: number;
    topLeftY: number;
    topRightX: number;
    topRightY: number;
    bottomRightX: number;
    bottomRightY: number;
    bottomLeftX: number;
    bottomLeftY: number;
    width: number;
    height: number;
    centerX: number;
    centerY: number;
}>;
export declare const focusElement: (page: Page, args: {
    backendNodeId: number;
}) => Promise<void>;
export declare const getElementRect: (page: Page, args: {
    id: string;
}) => Promise<any>;
export declare const findElements: (page: Page, args: {
    using: string;
    value: string;
}) => Promise<{
    "element-6066-11e4-a52e-4f735466cecf": string | undefined;
}[]>;
export declare const querySelectorAll: (page: Page, args: {
    selector: string;
}) => Promise<{
    "element-6066-11e4-a52e-4f735466cecf": string | undefined;
}[]>;
export declare const getCurrentUrl: (page: Page) => Promise<string>;
export declare const executeScript: (page: Page, args: {
    script: string;
    args: any[];
}) => Promise<any>;
type CDPSession = Awaited<ReturnType<ReturnType<Page['context']>['newCDPSession']>>;
export {};
