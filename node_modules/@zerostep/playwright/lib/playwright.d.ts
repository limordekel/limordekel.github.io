import type { Page, ElementHandle, Frame, ScrollType } from './types.js';
export declare const hoverCDPElement: (page: Page, args: {
    id: string;
}) => Promise<void>;
export declare const clickCDPElement: (page: Page, args: {
    id: string;
}) => Promise<void>;
export declare const clickAndInputCDPElement: (page: Page, args: {
    id: string;
    value: string;
}) => Promise<void>;
export declare const scrollCDPElement: (page: Page, args: {
    id: string;
    target: ScrollType;
}) => Promise<void>;
export declare const hoverLocation: (page: Page, args: {
    x: number;
    y: number;
}) => Promise<void>;
export declare const clickLocation: (page: Page, args: {
    x: number;
    y: number;
}) => Promise<void>;
export declare const clickAndInputLocation: (page: Page, args: {
    x: number;
    y: number;
    value: string;
}) => Promise<void>;
export declare const hoverElement: (page: Page, args: {
    element: ElementHandle<Element>;
}) => Promise<void>;
export declare const clickElement: (page: Page, args: {
    element: ElementHandle<Element>;
}) => Promise<void>;
export declare const clickAndInputElement: (page: Page, args: {
    element: ElementHandle<Element>;
    value: string;
}) => Promise<void>;
export declare const clickAndSelectOptionElement: (page: Page, args: {
    element: ElementHandle<Element>;
    value: string;
}) => Promise<void>;
export declare const hover: (page: Page, args: {
    x: number;
    y: number;
}) => Promise<void>;
export declare const click: (page: Page, args: {
    x: number;
    y: number;
}) => Promise<void>;
export declare const input: (page: Page, args: {
    value: string;
}) => Promise<void>;
export declare const keypressEnter: (page: Page) => Promise<void>;
export declare const keypressSelectAll: (page: Page) => Promise<void>;
export declare const keypressBackspace: (page: Page) => Promise<void>;
export declare const navigate: (page: Page, args: {
    url: string;
}) => Promise<void>;
export declare const scrollPageScript: (page: Page, args: {
    target: ScrollType;
}) => Promise<void>;
export declare const scrollElementScript: (page: Page, args: {
    element: ElementHandle<Element>;
    target: ScrollType;
}) => Promise<void>;
export declare const getViewportMetadata: (page: Page) => Promise<{
    viewportWidth: number;
    viewportHeight: number;
    pixelRatio: number;
}>;
export declare const getSnapshot: (page: Page) => Promise<{
    dom: string;
    screenshot: string;
    viewportWidth: number;
    viewportHeight: number;
    pixelRatio: number;
    layoutMetrics: import("playwright-core/types/protocol.js").Protocol.Page.getLayoutMetricsReturnValue;
}>;
export declare const cdpElementToPlaywrightHandle: (page: Page, args: {
    backendNodeId: number;
}) => Promise<ElementHandle<Element>>;
export declare const storeCDPElement: (page: Page, args: {
    backendNodeId: number;
}) => Promise<void>;
export declare const getStoredCDPElementRef: (page: Page) => Promise<ElementHandle<Element>>;
export declare const clearStoredCDPElementRef: (page: Page) => Promise<import("playwright-core").JSHandle<false> | import("playwright-core").JSHandle<true>>;
export declare const getElementAtLocation: (context: Page | Frame | ElementHandle<ShadowRoot>, args: {
    x: number;
    y: number;
    isShadowRoot?: boolean;
}) => Promise<{
    element: ElementHandle<Element> | null;
    tagName: string | null;
    isCustomElement: boolean | null;
}>;
