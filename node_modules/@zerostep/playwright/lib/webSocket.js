"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addWebSocketMessageHandler = exports.sendWebSocketMessage = exports.getWebSocket = exports.closeWebSocket = void 0;
const ws_1 = __importDefault(require("ws"));
const config_js_1 = require("./config.js");
let webSocket = null;
/**
 * Closes the websocket connection and clears the global shared reference
 */
const closeWebSocket = async () => {
    if (webSocket) {
        webSocket.close();
        webSocket = null;
    }
};
exports.closeWebSocket = closeWebSocket;
/**
 * Returns a stable reference to a WebSocket connected to the zerostep server.
 */
const getWebSocket = async () => {
    const promise = new Promise((resolve, reject) => {
        if (!webSocket) {
            webSocket = new ws_1.default(config_js_1.WEBSOCKET_URL);
        }
        const ws = webSocket;
        if (ws.readyState === ws.OPEN) {
            resolve(ws);
        }
        else {
            ws.addEventListener('error', (event) => {
                if (event.message.endsWith('401')) {
                    reject('Authentication failed. Make sure the $ZEROSTEP_TOKEN environment variable matches '
                        + 'the one in your account at https://app.zerostep.com');
                }
                else {
                    reject('An unknown error occurred.');
                }
            });
            ws.addEventListener('open', (event) => {
                resolve(ws);
            });
        }
    });
    return promise;
};
exports.getWebSocket = getWebSocket;
/**
 * Sends a message over the zerostep WebSocket
 */
const sendWebSocketMessage = async (message) => {
    const webSocket = await (0, exports.getWebSocket)();
    const data = JSON.stringify(message);
    if (config_js_1.LOGS_ENABLED) {
        console.log(`> ws send:`, data.slice(0, 250));
    }
    webSocket.send(data);
};
exports.sendWebSocketMessage = sendWebSocketMessage;
/**
 * Adds an event listener for message events emitted by the WebSocket. The
 * callback receives a parsed object from the message's `data` field. Returns
 * a functions that will remove the listener.
 */
const addWebSocketMessageHandler = async (taskId, handler) => {
    const webSocket = await (0, exports.getWebSocket)();
    const removeListener = () => webSocket.removeEventListener('message', listener);
    const listener = (message) => {
        const data = message.data;
        const parsedData = JSON.parse(data);
        if (config_js_1.LOGS_ENABLED && taskId === parsedData.taskId) {
            console.log(`< ws recv:`, JSON.stringify(parsedData).slice(0, 250));
        }
        handler(parsedData, removeListener);
    };
    webSocket.addEventListener('message', listener);
};
exports.addWebSocketMessageHandler = addWebSocketMessageHandler;
//# sourceMappingURL=webSocket.js.map